name:  package

env:
  DOTNET_VERSION: '6.0.x'
  RELEASE_VERSION: "${{ github.ref_name }}"

on:
  push:
    # based on when a tag is applied.
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 15

    steps:

    # 1) Check out the source code so that the workflow can access it.
    - name: Checkout
      uses: actions/checkout@v2

    # 2) Make sure that main has new commits
    - name: Verify commit exists in origin/main
      run: |
        git fetch --no-tags --prune --depth=1 origin +refs/heads/*:refs/remotes/origin/*
        git branch --remote --contains | grep origin/main

    # 3) Set up the .NET CLI environment for the workflow to use.
    #    The .NET version is specified by the environment variable.
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        # Authenticates packages to push to GPR
        source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

    # 4) Restore the dependencies and tools of a project or solution.
    - name: Install dependencies
      working-directory: ./src
      run: dotnet restore

    # 5) Build a project or solution and all of its dependencies.
    - name: Build
      working-directory: ./src
      run: dotnet build --configuration Release --no-restore -p:VersionPrefix="$("${{ env.RELEASE_VERSION }}" | cut -d '-' -f 1)" --version-suffix "$("${{ env.RELEASE_VERSION }}" | cut -d '-' -f 2)"

    # 6) Nuget packaging
    - name: Pack
      working-directory: ./src
      run: dotnet pack --configuration Release -p:VersionPrefix="$("${{ env.RELEASE_VERSION }}" | cut -d '-' -f 1)" --version-suffix "$("${{ env.RELEASE_VERSION }}" | cut -d '-' -f 2)" --no-build --output .

    # 7) Upload package back to github
    - name: Push
      working-directory: ./src
      run: dotnet nuget push "CloudFit.Azure.HealthChecks.$("${{ env.RELEASE_VERSION }}").nupkg"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}